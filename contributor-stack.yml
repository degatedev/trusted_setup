AWSTemplateFormatVersion: "2010-09-09"
Description: DeGate trusted-setup contributor AWS Stack


Parameters:

  VpcName:
    Type: String
    Description: VPC name
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9_\-\.]*'
    ConstraintDescription: must begin with a letter and contain alphanumeric characters, hyphens or dots.
    Default: trust-contributor

  VpcCidr:
    Description: The VPC CIDR address range
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    MaxLength: '18'
    MinLength: '9'
    Default: 10.5.0.0/16

  SubnetCidr:
    Description: The CIDR address range
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    MaxLength: '18'
    MinLength: '9'
    Default: 10.5.22.0/24

  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/20220523/amd64/hvm/ebs-gp2/ami-id'
  
  ContributorServerInstanceType:
    Description: Instance type of Contributor EC2
    Type: String
    Default: m6i.8xlarge

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: >-
            Choose a existing EC2 KeyPair. 
            If you don't have one, you can create one on https://ap-southeast-1.console.aws.amazon.com/ec2/home?region=ap-southeast-1#CreateKeyPair: 
        Parameters:
          - KeyPair
      - Label:
          default: >- 
            EC2 Parameters. You can use the default values.
        Parameters:
          - VpcName
          - VpcCidr
          - SubnetCidr
          - LatestAmiId
          - ContributorServerInstanceType


Resources: 

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 
        Ref: VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: 
          Ref: VpcName

  InternetGateway:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Network"
            Value: "Public"
          -
            Key: "Name"
            Value: 
              Fn::Join:
                - ''
                - - Ref: VpcName
                  - '-IGW'
          - Key: "Application"
            Value:
              Ref: "AWS::StackName"

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
  
  DefaultNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: 
            Fn::Join:
              - ''
              - - Ref: VpcName
                - '-nacl'

  InboundHTTPDefaultNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DefaultNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundDefaultNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "DefaultNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 
        Ref: SubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 
          Fn::Sub: "${VpcName}-subnet"
      VpcId:         
        Ref: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
      - Key: Name
        Value: 
          Fn::Sub: "${VpcName}-route-table"
      - Key: "Network"
        Value: "Public"
      VpcId:         
        Ref: VPC

  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      NetworkAclId:
        Ref: DefaultNetworkAcl

  ContributorServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable SSH access"
      GroupName: "ContributorServerSG"
      VpcId:  
        Ref: VPC
      SecurityGroupIngress:
      - CidrIp: "0.0.0.0/0"
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  ContributorServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 
        Ref: LatestAmiId     
      InstanceType:
        Ref: ContributorServerInstanceType
      KeyName:
        Ref: KeyPair
      SecurityGroupIds:
        - Ref: ContributorServerSecurityGroup
      SubnetId:
        Ref: PublicSubnet
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: 2000
      UserData:
        Fn::Base64: 
          Fn::Sub: |
            #!/bin/bash -xe
            hostnamectl set-hostname trust-contributor-server
            mkdir /swap
            fallocate -l 300G /swap/swapfile
            chmod 600 /swap/swapfile
            mkswap /swap/swapfile
            swapon /swap/swapfile
            echo "
            /swap/swapfile swap swap defaults 0 0
            " >> /etc/fstab
            apt update && apt install docker.io -y && systemctl enable docker && systemctl start docker
            mkdir -p /opt/trustmount
            mkdir -p /opt/participant_scripts
            echo "
            import subprocess
            import sys
            import time

            WORK_DIR = \"/opt/participant_scripts\"
            KEY_DIR = \"/opt/trustmount\"

            if __name__ == '__main__':
                print(f'Participant script started.')
                time.sleep(1)
                print(f'# <PARTICIPANT_SEQUENCE_NUMBER> \n'
                      f'# Prior to executing dthe computation operations, all participant should be aware of their participant '
                      f'sequence number. \n# For instance, the value of this parameter is 2 for the second participant. \n'
                      f'# Example: PARTICIPANT_SEQUENCE_NUMBER: 2')
                while True:
                    try:
                        participant_number = int(input(\"Please enter PARTICIPANT_SEQUENCE_NUMBER: \"))
                        if participant_number > 0:
                            print('[Configuration] <PARTICIPANT_SEQUENCE_NUMBER> is set.')
                            break
                        else:
                            print(f'[Configuration Error] the value of <PARTICIPANT_SEQUENCE_NUMBER> is not valid')
                    except ValueError:
                        print(f'[Configuration Error] the value of <PARTICIPANT_SEQUENCE_NUMBER> is not valid')
                time.sleep(1)
                print(f'# <PREVIOUS_CONTRIBUTION_HASH> \n'
                      f'# Each time a participant completes the computation of the signature, the signed_attestation.txt content '
                      f'are send to Keybase group. \n# The value of the second parameter hash value is located after the keyword '
                      f'\"Your contribution has SHA256 hash\" \n'
                      f'# Example: PREVIOUS_CONTRIBUTION_HASH: 0xc66e3d07b89199ac3343544b71122274fc875e903850b015c497439eab830b1f')
                while True:
                    previous_hash = input(\"Please enter PREVIOUS_CONTRIBUTION_HASH: \")
                    if previous_hash[0:2] == \"0x\" and len(previous_hash) == 66:
                        print('[Configuration] <PREVIOUS_CONTRIBUTION_HASH> is set.')
                        break
                    else:
                        print(f'[Configuration Error] the value of <PREVIOUS_CONTRIBUTION_HASH> is not valid')
                time.sleep(1)
                print(f'# <RANDOM_TEXT> \n'
                      f'# This is a random text determined by each participant. You may refer below for combination references. \n'
                      f'# Examples of entropy sources: \n'
                      f'# 1. /dev/urandom from one or more devices \n'
                      f'# 2. The most recent Bitcoin block hash \n'
                      f'# 3. Randomly mashing keys on the keyboard \n'
                      f'# 4. Asking random people on the street for numbers \n'
                      f'# 5. Geiger readings of radioactive material. e.g. a radioactive object, which can be anything from '
                      f'a banana to a Chernobyl fragment. \n'
                      f'# 6. Environmental data (e.g. the weather, seismic activity, or readings from the sun) \n'
                      f'# Example: RANDOM_TEXT: 324835795981e37b55dd115c6c37e913dd5da4926126503fa1d4abf8d \n')
                while True:
                    random_text = input(\"Please enter RANDOM_TEXT: \")
                    if random_text != \"\":
                        print('[Configuration] <RANDOM_TEXT> is set.')
                        break
                    else:
                        print(f'[Configuration Error] the value of <RANDOM_TEXT> is not valid')
                time.sleep(1)
                print(f'# <SFTP_PRIVATE_KEY> \n# The SFTP private key file can be retrieved from the coordinator via Keybase.')
                while True:
                    print(f'Please enter SFTP_PRIVATE_KEY, begin with \"-----BEGIN OPENSSH PRIVATE KEY-----\" '
                          f'and end with \"-----END OPENSSH PRIVATE KEY-----\"')
                    buffer = []
                    print(\"> \", end=\"\")
                    while True:
                        line = input()
                        buffer.append(line)
                        if line == \"-----END OPENSSH PRIVATE KEY-----\":
                            break
                    if buffer[0] == \"-----BEGIN OPENSSH PRIVATE KEY-----\" and buffer[-1] == \"-----END OPENSSH PRIVATE KEY-----\":
                        print('\n')
                        print('[Configuration] <SFTP_PRIVATE_KEY> is set.')
                        break
                    else:
                        print(f'[Configuration Error] the value of <SFTP_PRIVATE_KEY> is not valid')
                time.sleep(1)
                print('[Configuration] All parameters have been set.')
                key_name = f'sftpuser{participant_number}.key'
                with open(KEY_DIR + '/' + key_name, \"x\") as output:
                    for line in buffer:
                        output.write(line)
                        output.write('\n')
                print(f'[Key file preparation] generator key file in {KEY_DIR}/{key_name}')

                cmd = f'docker run --name trust -v /opt/trustmount:/opt/trustmount ' \
                      f'-itd degate/trusted-setup-participants:v1.1.0 ' \
                      f'{participant_number} {previous_hash} {random_text}'
                p = subprocess.Popen(
                    cmd,
                    shell=True,
                    stderr=subprocess.STDOUT,
                    stdout=subprocess.PIPE
                )
                while p.poll() is None:
                    line = p.stdout.readline()
                    stdout = line.decode(\"utf-8\").replace('\n', '')
                    print(f'[Container init] {stdout}')

                cmd = 'docker inspect -f {{.State.Status}} trust'
                result = subprocess.run(
                    cmd,
                    shell=True,
                    stderr=subprocess.PIPE,
                    stdout=subprocess.PIPE,
                    check=True
                )
                if result.returncode != 0:
                    err = result.stderr.decode(\"utf-8\").replace('\n', '')
                    print(f'[Container init error] {err}')
                    sys.exit(1)
                container_status = result.stdout.decode(\"utf-8\").replace('\n', '')
                if container_status != 'running':
                    print(f'[Container init error] container is not in running status')
                    sys.exit(1)
                print(f'The estimated duration to execute the Docker run command is approximately 14 hours. \n '
                      'To avoid computation failure due to remote disconnection, the process will run in the background. \n\n'
                      'Please check logs by \"sudo tail -f /opt/trustmount/trusted-setup.log\" \n'
                      'The computation is successfully completed when the last line of the script log is displayed as follows: \n'
                      ' ... Step 5 : Upload contribution file success, please fill in the information into your attestation.txt')
            " > /opt/participant_scripts/make_contribution_file.py
            chmod a+x /opt/participant_scripts/make_contribution_file.py

      Tags:
        - Key: Name
          Value: 'trust-contributor-server'
